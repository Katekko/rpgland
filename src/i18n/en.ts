import { MobModel } from "../core/models/mob.model";
import { PlayerModel } from "../core/models/player.model";
import { CommandTranslations } from "./translation";

const commandChar = '--';

function _createProfileBox(profile: string): string {
    const width = 20; // Width of the box
    const horizontalLine = '‚îÄ'.repeat(width); // Horizontal line for the box

    const boxTop = `‚ï≠${horizontalLine}‚ïÆ\n`; // Top line of the box
    const boxBottom = `\n‚ï∞${horizontalLine}‚ïØ`; // Bottom line of the box

    const emptyLine = `${' '.repeat(width)}`; // Empty line with matching width

    return `${boxTop}${emptyLine}\n\t${profile}\n${emptyLine}${boxBottom}`;
}

export const translationEn: CommandTranslations = {
    commands: {
        help: {
            title: "üåç *Welcome to the world of RPG Land!* üåç\n```Embark on an epic journey, conquer challenging areas, and become a legendary adventurer.\nHere's how to play:```",
            start: "üéÆ *START*   -> ```Begin your adventure in RPG Land! Use this command to initiate your journey and explore the vast world filled with challenges, treasures, and epic quests.```",
            hunt: `üèπ *HUNT*   -> \`\`\`Venture into the wilderness to hunt dangerous creatures and earn XP and coins.\nüïµÔ∏è‚Äç‚ôÇÔ∏è *${commandChar}hunt find*\n‚öîÔ∏è \*${commandChar}hunt attack\*\`\`\` `,
            heal: "ü©π *HEAL*   -> ```Consume a life potion to restore your health points (HP)‚ù§Ô∏è when it's low.```",
            shop: "üõçÔ∏è *SHOP*   -> ```Visit the marketplace to spend your hard-earned coins on various items, gear, and enhancements.```"
        },
        start: {
            welcome: (name: string) => `üåç Welcome to the world of RPG Land, *${name}*! üåç\nEmbark on an epic journey, conquer challenging areas, and become a legendary adventurer. ‚öîÔ∏èüõ°Ô∏è\n\nüïµÔ∏è‚Äç‚ôÇÔ∏è To find mobs, use the command: *${commandChar}hunt find*\n‚öîÔ∏è To attack a mob, use the command: *${commandChar}hunt attack*`,
            error: '‚ùå Failed start your journey ',
            playerAlreadyStarted: '‚ùå Oops! Looks like you\'re already in the game.'
        },
        commons: {
            needToStart: `‚ùå You need to start you journey first\nType: *${commandChar}start*`,
            somethingWrong: '‚ùå‚ùå‚ùå Something is off, please call Katekko ‚ùå‚ùå‚ùå'
        },
        hunt: {
            find: {
                found: (mob: MobModel) => `üèπ Get ready to battle! üèπ\nYou found a *${mob.name}* with *${mob.health}*‚ù§Ô∏è health!`,
                failedToSearch: `‚ö†Ô∏è You are already in hunting mode. Finish your current hunt before starting a new one.`,
            },
            attack: {
                attacking: (mob: string, damage: number, remainingHealth: number) => `‚öîÔ∏è You attacked the *${mob}* and dealt *${damage}* damage! ‚öîÔ∏è\nThe *${mob}* has *${remainingHealth}* ‚ù§Ô∏è remaining.`,
                attacked: (mob: string, damage: number, remainingHealth: number) => `üî• The *${mob}* attacked you and dealt *${damage}* damage! üî•\nYou have *${remainingHealth}* ‚ù§Ô∏è remaining.`,
                defeated: (mob: string) => `‚ò†Ô∏è You were defeated by the *${mob}*! ‚ò†Ô∏è\nYou have lost one level.`,
                mobDefeated: (mob: string, exp: number) => `üí• You have defeated the *${mob}* and earned *${exp}* experience points!`,
                failedToAttack: `‚ö†Ô∏è You are not currently hunting any mob. Use the command *${commandChar}hunt find* to start hunting.`,
                levelUp: (level: number) => `üéâ Congratulations! üéâ\nYou have reached level *${level}*!`,
            }
        },
        perfil: (player: PlayerModel) => {
            const progressBarLength = 10;
            const filledBarCount = Math.floor((player.exp / player.getExpNeededForNextLevel()) * progressBarLength);
            const emptyBarCount = progressBarLength - filledBarCount;

            const filledBar = '‚ñì'.repeat(filledBarCount);
            const emptyBar = '‚ñë'.repeat(emptyBarCount);
            return _createProfileBox(`üßç *${player.name}* > *Lv. ${player.level}*\n\t[${filledBar}${emptyBar}] (${player.exp}/${player.getExpNeededForNextLevel()})\n\n\t‚öîÔ∏è *${player.getMaxAttack()}*`);
        },
    }
};
